Welcome to the Shiro OAuth plugin for Grails! If you're using the [core Shiro plugin|http://grails.org/plugin/shiro] in your application already and you want easy authentication via Twitter, Facebook, et al. then this is the plugin for you. It simplifies the integration of OAuth authentication via the [Scribe OAuth plugin|http://grails.org/plugin/oauth-scribe] into the Shiro security framework.

h2. Getting Started

Start by adding the plugin as a dependency to @BuildConfig.groovy@:

{code}
plugins {
    compile "\:shiro-oauth\:0.1"
}
{code}

You can find the dependency declaration for the latest version on the [plugin portal page|http://grails.org/plugin/shiro-oauth]. Next up is a little bit of configuration. Add the OAuth provider configuration to your @Config.groovy@ file:

{code}
oauth {
    provider = org.scribe.builder.api.TwitterApi
    key = 'consumer key'
    secret = 'consumer secret'
    callback = "${grails.serverURL}/oauth/callback"
    successUri = '/oauth/success?provider=twitter'
    failureUri = '/unauthorized'
}

security.shiro.oauth.linkAccountUrl = "/oauth/linkaccount"
{code}

The first block is the configuration for the [Scribe OAuth plugin|http://grails.org/plugin/oauth-scribe] so check its documentation for more details. At this moment in time, the Scribe OAuth plugin only supports one provider at a time. This will be resolved in a future version of the plugin.

You can put your own URL in there for @successUri@, but make sure that it maps to the @ShiroOAuthController@'s @onSuccess@ action and that the @provider@ URL parameter is included. Use whatever you want for the @failureUri@ setting. The @callback@ URL should map to the @OauthController@'s @callback@ action (note the different captitalisation of the controller name) and must be an absolute URL. For example:

{code}
"/oauth/success"(controller: "shiroOAuth", action: "onSuccess")
"/oauth/callback"(controller: "oauth", action: "callback")
{code}

The second configuration block is specifically for this plugin. The @linkAccountUrl@ should map to a page that allows users to link their OAuth identities to internal Shiro accounts. You have to code this page yourself, but once you have a reference to an internal Shiro account, be it a new one or an existing one, then you can forward the request to another action provided by the plugin:

{code}
def linkAccount() {
    def user = ...
    forward controller: "shiroOAuth", action: "linkAccount", params: [userId: user.id]
}
{code}

The above will link the OAuth account to the internal Shiro one automatically and then log the user in (if he or she hasn't already been authenticated by this stage). Finally, it will redirect to the URL specified by either the `targetUri` parameter or if that doesn't exist, the `targetUri` session variable.

If you choose to handle this yourself, note that the Shiro OAuth plugin puts the OAuth authentication token into the session under the key 'shiroAuthToken'. This should be removed from the session after a successful `subject.login()`.

Finally, you need to allow the user to log in via an OAuth provider. The easiest way to do this is to add a link to your login page:

{code:xml}
<oauth:connect>Log in with Twitter</oauth:connect>
{code}

This tag is provided by the Scribe OAuth plugin. When the user clicks on the link, he or she will be redirected to the configured OAuth provider. If the user already has a linked account, he or she will be automatically logged in. Otherwise, he or she will be taken to the "link an account" page.
